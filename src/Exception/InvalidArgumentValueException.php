<?php

namespace Apicycle\Common\Exception;

use Apicycle\Common\Utility\VariableTypeValidator;
use Exception;

/**
 * Designed to be thrown when invalid argument value is supported.
 *
 * @codeCoverageIgnore
 *
 * @version 0.1.0
 * @since   0.1.0
 * @package Apicycle\Common\Exception
 * @author  Etki <etki@etki.name>
 */
class InvalidArgumentValueException extends InvalidArgumentException
{
    /**
     * Argument name.
     *
     * @type string
     * @since 0.1.0
     */
    protected $argumentName;
    /**
     * Argument value.
     *
     * @type mixed
     * @since 0.1.0
     */
    protected $argumentValue;

    /**
     * Simple initializer
     *
     * @param string      $argumentName  Argument name.
     * @param int         $argumentValue Erroneous argument value.
     * @param string|null $message       Exception message. Will be
     *                                   autogenerated if omitted.
     * @param Exception   $previous      Previous exception (if any).
     *
     * @return self New instance.
     * @since 0.1.0
     */
    public function __construct(
        $argumentName,
        $argumentValue,
        $message = null,
        Exception $previous = null
    ) {
        $this->argumentName = $argumentName;
        $this->argumentValue = $argumentValue;
        if (!$message) {
            $message = $this->composeMessage($argumentName, $argumentValue);
        }
        parent::__construct($message, 0, $previous);
    }

    /**
     * Generates exception message.
     *
     * @param string $argumentName  Name of the argument.
     * @param mixed  $argumentValue Erroneous argument value.
     *
     * @return string Composed message.
     * @since 0.1.0
     */
    protected function composeMessage($argumentName, $argumentValue)
    {
        if (VariableTypeValidator::isCastableToString($argumentValue)) {
            return sprintf(
                'Method has been invoked with invalid value `%s` for ' .
                'argument `%s`',
                (string) $argumentValue,
                $argumentName
            );
        }
        return sprintf(
            'Method has been invoked with invalid value of type `%s` for ' .
            'argument `%s`',
            gettype($argumentValue),
            $argumentName
        );
    }

    /**
     * Returns argument name.
     *
     * @return string
     * @since 0.1.0
     */
    public function getArgumentName()
    {
        return $this->argumentName;
    }

    /**
     * Returns argument value.
     *
     * @return mixed
     * @since 0.1.0
     */
    public function getArgumentValue()
    {
        return $this->argumentValue;
    }
}
