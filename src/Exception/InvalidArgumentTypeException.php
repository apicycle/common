<?php

namespace Apicycle\Common\Exception;

use Exception;

/**
 * Designed to be thrown whenever argument type mismatches expected.
 *
 * @codeCoverageIgnore
 *
 * @version 0.1.0
 * @since   0.1.0
 * @package Apicycle\Common\Exception
 * @author  Etki <etki@etki.name>
 */
class InvalidArgumentTypeException extends InvalidArgumentValueException
{
    /**
     * Real argument type.
     *
     * @type string
     * @since 0.1.0
     */
    protected $argumentType;
    /**
     * Expected argument type.
     *
     * @type string
     * @since 0.1.0
     */
    protected $expectedType;

    /**
     * Initializer
     *
     * @param string      $argumentName  Argument name.
     * @param mixed       $argumentValue Argument value.
     * @param string      $expectedType  Expected argument type.
     * @param string|null $message       Exception message. Wil be autogenerated
     *                                   if omitted.
     * @param Exception   $previous      Previous exception (if any).
     *
     * @return self
     * @since 0.1.0
     */
    public function __construct(
        $argumentName,
        $argumentValue,
        $expectedType,
        $message = null,
        Exception $previous = null
    ) {
        $argumentType = gettype($argumentValue);
        $this->argumentType = $argumentType;
        $this->expectedType = $expectedType;
        if (!$message) {
            $message = $this->composeMessage(
                $argumentName,
                $expectedType,
                $argumentType
            );
        }
        parent::__construct($argumentName, $argumentValue, $message, $previous);
    }

    /**
     * Generates exception message.
     *
     * @param string $argumentName Argument name.
     * @param string $argumentType Real argument type.
     * @param string $expectedType Expected argument type.
     *
     * @return string Generated message.
     * @since 0.1.0
     */
    protected function composeMessage(
        $argumentName,
        $argumentType,
        $expectedType
    ) {
        return sprintf(
            'Argument `%s` was expected to be of type `%s`, `%s` received ' .
            'instead',
            $argumentName,
            $expectedType,
            $argumentType
        );
    }

    /**
     * Returns argument type.
     *
     * @return string
     * @since 0.1.0
     */
    public function getArgumentType()
    {
        return $this->argumentType;
    }

    /**
     * Returns expected argument type.
     *
     * @return string
     * @since 0.1.0
     */
    public function getExpectedType()
    {
        return $this->expectedType;
    }
}
