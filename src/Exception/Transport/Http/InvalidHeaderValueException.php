<?php

namespace Apicycle\Common\Exception\Transport\Http;

use Apicycle\Common\Exception\InvalidArgumentException;
use Apicycle\Common\Utility\VariableTypeValidator;
use Exception;

/**
 * Designed to be thrown when invalid header value is processed.
 *
 * @version 0.1.0
 * @since   0.1.0
 * @package Apicycle\Common\Exception\Transport\Http
 * @author  Etki <etki@etki.name>
 */
class InvalidHeaderValueException extends InvalidArgumentException
{
    /**
     * Header name.
     *
     * @type string
     * @since 0.1.0
     */
    protected $headerName;
    /**
     * Header value.
     *
     * @type mixed
     * @since 0.1.0
     */
    protected $headerValue;

    /**
     * Initializer.
     *
     * @param string      $headerName  Name of the header.
     * @param mixed       $headerValue Real header value that caused exception.
     * @param string|null $message     Exception message, will be autogenerated
     *                                 if omitted.
     * @param int         $code        Exception code.
     * @param Exception   $previous    Previous exception (if any).
     *
     * @return self
     * @since 0.1.0
     */
    public function __construct(
        $headerName,
        $headerValue,
        $message = null,
        $code = 0,
        Exception $previous = null
    ) {
        $this->headerName = $headerName;
        $this->headerValue = $headerValue;
        if (!$message) {
            $message = $this->composeMessage($headerName, $headerValue);
        }
        parent::__construct($message, $code, $previous);
    }

    /**
     * Returns header name.
     *
     * @return string
     * @since 0.1.0
     */
    public function getHeaderName()
    {
        return $this->headerName;
    }

    /**
     * Returns header value, most probably string, though it can be virtually
     * anything since it caused an exception.
     *
     * @return mixed
     * @since 0.1.0
     */
    public function getHeaderValue()
    {
        return $this->headerValue;
    }

    /**
     * Generates new exception message.
     *
     * @param string       $headerName  Header name.
     * @param string|mixed $headerValue Header value.
     *
     * @SuppressWarnings(PHPMD.ElseExpression)
     *
     * @return string Composed message.
     * @since 0.1.0
     */
    protected function composeMessage($headerName, $headerValue)
    {
        if (VariableTypeValidator::isCastableToString($headerValue)) {
            $substitution = (string) $headerValue;
        } else {
            $substitution = gettype($headerValue);
        }
        return sprintf(
            '`%s` has been received as a new value for header `%s`',
            $substitution,
            $headerName
        );
    }
}
